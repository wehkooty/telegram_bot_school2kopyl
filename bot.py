import logging
import asyncio
from datetime import datetime
import os
import openpyxl

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

import config

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ë–æ—Ç ---
bot = Bot(
    token=config.API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
pending_answers = {}

# --- Excel ---
def init_excel():
    filename = "requests.xlsx"
    if not os.path.exists(filename):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(
            ["ID", "–î–∞—Ç–∞/–≤—Ä–µ–º—è", "–ò–º—è", "Username", "–¢–∏–ø", "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]
        )
        wb.save(filename)


def save_question(user, text, msg_type):
    init_excel()
    filename = "requests.xlsx"
    wb = openpyxl.load_workbook(filename)
    ws = wb.active
    new_id = ws.max_row
    ws.append(
        [
            new_id,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            user.full_name,
            f"@{user.username}" if user.username else "‚Äî",
            msg_type,
            text,
            "",
        ]
    )
    wb.save(filename)
    return new_id


def save_answer(row_index, answer_text):
    filename = "requests.xlsx"
    wb = openpyxl.load_workbook(filename)
    ws = wb.active
    ws.cell(row=row_index, column=7).value = answer_text
    wb.save(filename)


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def parent_menu():
    """–ú–µ–Ω—é –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
            [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="service")],
            [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
            [InlineKeyboardButton(text="üìú –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")],
        ]
    )


def admin_menu():
    """–ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="list_questions")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(text="üìÇ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export")],
        ]
    )


# --- /start ---
@dp.message(CommandStart())
async def start(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_menu(),
        )
    else:
        await message.answer(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π üè´\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=parent_menu(),
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è ---
@dp.callback_query(F.data == "ask_question")
async def cb_ask_question(callback: types.CallbackQuery):
    await callback.message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à–∫–æ–ª—ã.")
    await callback.answer()


@dp.callback_query(F.data == "service")
async def cb_service(callback: types.CallbackQuery):
    await callback.message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è (–∫—Ä—É–∂–æ–∫, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è).")
    await callback.answer()


@dp.callback_query(F.data == "contacts")
async def cb_contacts(callback: types.CallbackQuery):
    await callback.message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω —à–∫–æ–ª—ã: 80171955108\nüìß Email: sh2@kopyl.gov.by")
    await callback.answer()


@dp.callback_query(F.data == "my_questions")
async def cb_my_questions(callback: types.CallbackQuery):
    init_excel()
    wb = openpyxl.load_workbook("requests.xlsx")
    ws = wb.active
    user = callback.from_user.full_name

    result = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        qid, date, name, username, msg_type, question, answer = row
        if user == name:
            result.append(
                f"‚Ññ{qid} ({msg_type}, {date}):\n‚ùì {question}\n‚û°Ô∏è {answer if answer else '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏'}"
            )

    if not result:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
    else:
        await callback.message.answer("\n\n".join(result))
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ ---
@dp.callback_query(F.data == "list_questions")
async def cb_list_questions(callback: types.CallbackQuery):
    if callback.from_user.id != config.ADMIN_ID:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    init_excel()
    wb = openpyxl.load_workbook("requests.xlsx")
    ws = wb.active

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n"
    kb = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        qid, date, name, username, msg_type, question, answer = row
        if msg_type == "–í–æ–ø—Ä–æ—Å" and not answer:
            kb.append([InlineKeyboardButton(text=f"‚úç –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ‚Ññ{qid}", callback_data=f"reply_{row[0]}_{qid}")])
            text += f"‚Ññ{qid} –æ—Ç {name} ({username})\n‚ùì {question}\n\n"

    if not kb:
        await callback.message.answer("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
    else:
        await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await callback.answer()


@dp.callback_query(F.data == "stats")
async def cb_stats(callback: types.CallbackQuery):
    if callback.from_user.id != config.ADMIN_ID:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    init_excel()
    wb = openpyxl.load_workbook("requests.xlsx")
    ws = wb.active

    total, questions, services, closed = 0, 0, 0, 0
    for row in ws.iter_rows(min_row=2, values_only=True):
        total += 1
        msg_type = row[4]
        answer = row[6]
        if msg_type == "–í–æ–ø—Ä–æ—Å":
            questions += 1
            if answer:
                closed += 1
        if msg_type == "–ó–∞—è–≤–∫–∞":
            services += 1

    await callback.message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {questions} (‚úÖ {closed} –∑–∞–∫—Ä—ã—Ç–æ)\n"
        f"üìÖ –ó–∞—è–≤–æ–∫: {services}\n"
    )
    await callback.answer()


@dp.callback_query(F.data == "export")
async def cb_export(callback: types.CallbackQuery):
    if callback.from_user.id != config.ADMIN_ID:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    if os.path.exists("requests.xlsx"):
        await callback.message.answer_document(open("requests.xlsx", "rb"))
    else:
        await callback.message.answer("‚õî –§–∞–π–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞ ---
@dp.callback_query(F.data.startswith("reply_"))
async def cb_reply(callback: types.CallbackQuery):
    if callback.from_user.id == config.ADMIN_ID:
        _, parent_id, row_index = callback.data.split("_")
        parent_id, row_index = int(parent_id), int(row_index)

        pending_answers[config.ADMIN_ID] = (parent_id, row_index)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await callback.message.answer(f"‚úç –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{row_index}.")

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
        try:
            await bot.send_message(
                parent_id,
                f"üì¢ –í–∞—à –≤–æ–ø—Ä–æ—Å ‚Ññ{row_index} –ø—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. "
                "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ ‚è≥"
            )
        except:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è.")

        await callback.answer()
    else:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)


# --- –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.message()
async def handler(message: types.Message):
    user = message.from_user
    text = message.text

    if user.id == config.ADMIN_ID and user.id in pending_answers:
        parent_id, row_index = pending_answers.pop(user.id)
        save_answer(row_index, text)
        await bot.send_message(parent_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n{text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—é.")
        return

    if user.id != config.ADMIN_ID:
        if "–∑–∞–ø–∏—Å" in text.lower() or "—É—Å–ª—É–≥" in text.lower():
            msg_type = "–ó–∞—è–≤–∫–∞"
        elif "?" in text:
            msg_type = "–í–æ–ø—Ä–æ—Å"
        else:
            msg_type = "–î—Ä—É–≥–æ–µ"

        qid = save_question(user, text, msg_type)

        if msg_type == "–í–æ–ø—Ä–æ—Å":
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"‚úç –û—Ç–≤–µ—Ç–∏—Ç—å (‚Ññ{qid})", callback_data=f"reply_{user.id}_{qid}")]
                ]
            )
            await bot.send_message(
                config.ADMIN_ID,
                f"‚ùì –í–æ–ø—Ä–æ—Å ‚Ññ{qid} –æ—Ç {user.full_name} (@{user.username}):\n{text}",
                reply_markup=kb,
            )
            await message.answer(f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (‚Ññ{qid}). –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        elif msg_type == "–ó–∞—è–≤–∫–∞":
            await bot.send_message(
                config.ADMIN_ID,
                f"üìÖ –ó–∞—è–≤–∫–∞ ‚Ññ{qid} –æ—Ç {user.full_name} (@{user.username}):\n{text}",
            )
            await message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ (‚Ññ{qid}). –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        else:
            await bot.send_message(
                config.ADMIN_ID,
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{qid} –æ—Ç {user.full_name} (@{user.username}):\n{text}",
            )
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à–∫–æ–ª—ã.")


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    init_excel()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
